(describe "Syntax propertization"

  (it "should correctly highlight multiline strings"
    (expect '("local html = import 'html.libsonnet';"
              ""
              "{"
              "  intro: html.paragraphs(["
              "    |||"
              "      This page describes the functions available in Jsonnet's standard library, i.e. the object"
              "      implicitly bound to the <code>std</code> variable. Some of the standard library functions"
              "      can be implemented in Jsonnet. Their code can be found in the <tt>std.jsonnet</tt> file."
              "      The behavior of some of the other functions, i.e. the ones that expose extra functionality"
              "      not otherwise available to programmers, is described formally in the <a href=\"/language/spec.html\">specification</a>."
              "    |||,"
              "    |||"
              "      The standard library is implicitly added to all Jsonnet programs by enclosing them in a"
              "      local construct. For example, if the program given by the user is <code>{x: \"foo\"}</code>,"
              "      then the actual code executed would be <code>local std = { ... }; {x: \"foo\"}</code>. The"
              "      functions in the standard library are all hidden fields of the <code>std</code> object."
              "    |||,"
              "  ]),"
              "  prefix: 'std',"
              "  groups: ["
              "    {"
              "      name: 'External Variables',"
              "      id: 'ext_vars',"
              "      fields: ["
              "        {"
              "          name: 'extVar',"
              "          params: ['x'],"
              "          description: 'If an external variable with the given name was defined, return its string value. Otherwise, raise an error.',"
              "        },"
              "      ],"
              "    },"
              "    {"
              "      name: 'Types and Reflection',"
              "      id: 'types_reflection',"
              "      fields: ["
              "        {"
              "          name: 'thisFile',"
              "          description: 'Note that this is a field. It contains the current Jsonnet filename as a string.',"
              "        },"
              "        {"
              "          name: 'type',"
              "          params: ['x'],"
              "          description: html.paragraphs(["
              "	    |||"
              "              Return a string that indicates the type of the value. The possible return values are:"
              "              \"array\", \"boolean\", \"function\", \"null\", \"number\", \"object\", and \"string\"."
              "            |||,"
              "            |||"
              "              The following functions are also available and return a boolean:"
              "              <code>std.isArray(v)</code>, <code>std.isBoolean(v)</code>, <code>std.isFunction(v)</code>,"
              "              <code>std.isNumber(v)</code>, <code>std.isObject(v)</code>, and"
              "              <code>std.isString(v)</code>."
              "            |||,"
              "          ]),"
              "        },"
              "        {"
              "          name: 'length',"
              "          params: ['x'],"
              "          description: |||"
              "            Depending on the type of the value given, either returns the number of elements in the"
              "            array, the number of codepoints in the string, the number of parameters in the function, or"
              "            the number of fields in the object. Raises an error if given a primitive value, i.e."
              "            <code>null</code>, <code>true</code> or <code>false</code>."
              "          |||,"
              "        },"
              "        {"
              "          name: 'objectHas',"
              "          params: ['o', 'f'],"
              "          description: |||"
              "            Returns <code>true</code> if the given object has the field (given as a string), otherwise"
              "            <code>false</code>. Raises an error if the arguments are not object and string"
              "            respectively. Returns false if the field is hidden."
              "          |||,"
              "        },"
              "      ],"
              "    },"
              "  ],"
              "}")
            :to-produce-faceup-markup
            '("«b:local» «v:html» = «b:import» «s:'html.libsonnet'»;"
              ""
              "{"
              "«k:  intro:» html.paragraphs(["
              "    «s:|||"
              "      This page describes the functions available in Jsonnet's standard library, i.e. the object"
              "      implicitly bound to the <code>std</code> variable. Some of the standard library functions"
              "      can be implemented in Jsonnet. Their code can be found in the <tt>std.jsonnet</tt> file."
              "      The behavior of some of the other functions, i.e. the ones that expose extra functionality"
              "      not otherwise available to programmers, is described formally in the <a href=\"/language/spec.html\">specification</a>."
              "    |||»,"
              "    «s:|||"
              "      The standard library is implicitly added to all Jsonnet programs by enclosing them in a"
              "      local construct. For example, if the program given by the user is <code>{x: \"foo\"}</code>,"
              "      then the actual code executed would be <code>local std = { ... }; {x: \"foo\"}</code>. The"
              "      functions in the standard library are all hidden fields of the <code>std</code> object."
              "    |||»,"
              "  ]),"
              "«k:  prefix:» «s:'std'»,"
              "«k:  groups:» ["
              "    {"
              "«k:      name:» «s:'External Variables'»,"
              "«k:      id:» «s:'ext_vars'»,"
              "«k:      fields:» ["
              "        {"
              "«k:          name:» «s:'extVar'»,"
              "«k:          params:» [«s:'x'»],"
              "«k:          description:» «s:'If an external variable with the given name was defined, return its string value. Otherwise, raise an error.'»,"
              "        },"
              "      ],"
              "    },"
              "    {"
              "«k:      name:» «s:'Types and Reflection'»,"
              "«k:      id:» «s:'types_reflection'»,"
              "«k:      fields:» ["
              "        {"
              "«k:          name:» «s:'thisFile'»,"
              "«k:          description:» «s:'Note that this is a field. It contains the current Jsonnet filename as a string.'»,"
              "        },"
              "        {"
              "«k:          name:» «s:'type'»,"
              "«k:          params:» [«s:'x'»],"
              "«k:          description:» html.paragraphs(["
              "	    «s:|||"
              "              Return a string that indicates the type of the value. The possible return values are:"
              "              \"array\", \"boolean\", \"function\", \"null\", \"number\", \"object\", and \"string\"."
              "            |||»,"
              "            «s:|||"
              "              The following functions are also available and return a boolean:"
              "              <code>std.isArray(v)</code>, <code>std.isBoolean(v)</code>, <code>std.isFunction(v)</code>,"
              "              <code>std.isNumber(v)</code>, <code>std.isObject(v)</code>, and"
              "              <code>std.isString(v)</code>."
              "            |||»,"
              "          ]),"
              "        },"
              "        {"
              "«k:          name:» «s:'length'»,"
              "«k:          params:» [«s:'x'»],"
              "«k:          description:» «s:|||"
              "            Depending on the type of the value given, either returns the number of elements in the"
              "            array, the number of codepoints in the string, the number of parameters in the function, or"
              "            the number of fields in the object. Raises an error if given a primitive value, i.e."
              "            <code>null</code>, <code>true</code> or <code>false</code>."
              "          |||»,"
              "        },"
              "        {"
              "«k:          name:» «s:'objectHas'»,"
              "«k:          params:» [«s:'o'», «s:'f'»],"
              "«k:          description:» «s:|||"
              "            Returns <code>true</code> if the given object has the field (given as a string), otherwise"
              "            <code>false</code>. Raises an error if the arguments are not object and string"
              "            respectively. Returns false if the field is hidden."
              "          |||»,"
              "        },"
              "      ],"
              "    },"
              "  ],"
              "}")
            4))

  (it "should correctly highlight multiline strings containing pipe characters"
    (expect '("["
              "  html.pre({}, |||"
              "      \"x\":"
              "        - 1"
              "        - 2"
              "        - 3"
              "        - true"
              "        - false"
              "        - null"
              "        - |"
              "            string"
              "            string"
              "      \"y\":"
              "        \"a\": 1"
              "        \"b\": 2"
              "        \"c\":"
              "            - 1"
              "            - 2"
              "  |||),"
              "]")
            :to-produce-faceup-markup
            '("["
              "  html.pre({}, «s:|||"
              "      \"x\":"
              "        - 1"
              "        - 2"
              "        - 3"
              "        - true"
              "        - false"
              "        - null"
              "        - |"
              "            string"
              "            string"
              "      \"y\":"
              "        \"a\": 1"
              "        \"b\": 2"
              "        \"c\":"
              "            - 1"
              "            - 2"
              "  |||»),"
              "]")
            164))

  (it "should correctly highlight multiline strings with identical openers/closer"
    (expect '("["
              "  |||"
              "    foo"
              "  |||"
              "]")
            :to-produce-faceup-markup
            '("["
              "  «s:|||"
              "    foo"
              "  |||»"
              "]")
            207)))
